import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import * as marked from 'marked';

import { GithubService } from '../services/github.service';
import { TranslateService } from '@ngx-translate/core';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/defaultIfEmpty';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/do';


@Component({
    selector: 'app-nz-issue-help',
    templateUrl: './nz-issue-help.component.html',
    styleUrls: ['./nz-issue-help.component.less']
})
export class NzIssueHelpComponent implements OnInit {
    validateForm: FormGroup;
    validateFeatureForm: FormGroup;
    autoSize = {
        minRows: 4,
        maxRows: 999
    };
    isIntroVisible = false;
    isPreviewVisible = false;
    issueType = 'bug';
    confirmMarkdown = '';
    issueOpts: any = {
        repositories: ['ng-zorro-antd'],
        features: [
            {
                'name': 'issue.type.bug',
                'value': 'bug'
            },
            {
                'name': 'issue.type.feature',
                'value': 'feature'
            }
        ],
        versions: []
    };
    searchIssues: any = [];

    constructor(private fb: FormBuilder, private _githubApiService: GithubService, public translate: TranslateService) {
    }

    ngOnInit() {
        this.validateForm = this.fb.group({
            repository: ['ng-zorro-antd', [Validators.required]],
            issue_title: ['', [Validators.required]],
            link: ['', [this.replinkValidator]],
            version: ['', [Validators.required]],
            environment: ['', [Validators.required]],
            step: ['', [Validators.required]],
            expect_result: ['', [Validators.required]],
            exist_result: ['', [Validators.required]],
            addtion: [''],
        });
        this.validateFeatureForm = this.fb.group({
            repository: ['ng-zorro-antd', [Validators.required]],
            issue_title: ['', [Validators.required]],
            motivation: ['', [Validators.required]],
            proposal: ['', [Validators.required]],
        });
        this._githubApiService.fetchReleases('NG-ZORRO', 'ng-zorro-antd').subscribe(data => {
            this.issueOpts.versions = [];
            for (const i in data) {
                this.issueOpts.versions.push(data[i]['tag_name']);
            }
            this.validateForm.controls['version'].setValue(this.issueOpts.versions[0]);
        });
        this.validateForm.controls['issue_title'].valueChanges
            .do(data => {
                if (!data) {
                    this.searchIssues = [];
                }
            })
            .debounceTime(300).distinctUntilChanged().filter(search => search.replace(' ', '') !== '')
            .subscribe(data => {
                // 搜索框值发生变化
                this._githubApiService.fetchIssues(data).subscribe(issues => {
                    if (issues['items']) {
                        this.searchIssues = issues['items'];
                    } else {
                        this.searchIssues = [];
                    }
                });
            });
        this.validateFeatureForm.controls['issue_title'].valueChanges
            .do(data => {
                if (!data) {
                    this.searchIssues = [];
                }
            })
            .debounceTime(300).distinctUntilChanged().filter(search => search.replace(' ', '') !== '')
            .subscribe(data => {
                // 搜索框值发生变化
                this._githubApiService.fetchIssues(data).subscribe(issues => {
                    if (issues['items']) {
                        this.searchIssues = issues['items'];
                    } else {
                        this.searchIssues = [];
                    }
                });
            });
    }

    getFormControl(name) {
        if (this.issueType === 'bug') {
            return this.validateForm.controls[name];
        } else {
            return this.validateFeatureForm.controls[name];
        }
    }

    handleOk(e) {
        //
    }

    handleCancel(e) {
        this.isIntroVisible = false;
        this.isPreviewVisible = false;
    }

    /**
     * 更换issue type
     * @private
     */
    changeType() {
        this.searchIssues = [];
    }

    _submitForm() {
        const repo = this.getFormControl('repository').value;
        const label = this.issueType === 'feature' ? '&labels=type:feature' : '';
        this.confirmMarkdown = this.confirmMarkdown + '<!-- generated by ng-zorro-issue-helper. DO NOT REMOVE -->';
        const body = encodeURIComponent(this.confirmMarkdown).replace(/%2B/gi, '+');
        window.open(
            `https://github.com/NG-ZORRO/${repo}/issues/new?title=${this.getFormControl('issue_title').value}&body=${body}${label}`,
        );
    }

    replinkValidator = (control: FormControl): { [s: string]: boolean } => {
        // 匹配预定复现网址
        const REP_LINK_REGEXP = /(https?|ftp|file):\/\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]*(stackblitz|github)[-A-Za-z0-9+&@#/%?=~_|!:,.;]+/;
        // 现有网址不可完全复制
        const REP_LINKS = 'https://stackblitz.com/edit/ng-zorro-antd-setup?file=app%2Fapp.component.ts';
        if (!control.value) {
            return {error: true, required: true};
        } else if (!REP_LINK_REGEXP.test(control.value) || REP_LINKS.indexOf(control.value) !== -1) {
            return {error: true, repLink: true};
        }
        return null;
    }

    _submitFormPreview() {
        if (this.issueType === 'bug') {
            for (const i in this.validateForm.controls) {
                this.validateForm.controls[i].markAsDirty();
            }
            if (!this.validateForm.invalid) {
                // 手动格式化一下MARKDOWN
                this.confirmMarkdown = `
## Version

${this.getFormControl('version').value}

## Environment

${this.getFormControl('environment').value}

## Reproduction link

[${this.getFormControl('link').value}](${this.getFormControl('link').value})

## Steps to reproduce

${this.getFormControl('step').value}

## What is expected?

${this.getFormControl('expect_result').value}

## What is actually happening?

${this.getFormControl('exist_result').value}

## Other?

${this.getFormControl('addtion').value}

`;
                document.getElementById('previewContent').innerHTML = marked(this.confirmMarkdown);
                this.isPreviewVisible = true;
            }
        } else {
            for (const i in this.validateFeatureForm.controls) {
                this.validateFeatureForm.controls[i].markAsDirty();
            }
            if (!this.validateFeatureForm.invalid) {
                this.confirmMarkdown = `
## What problem does this feature solve?

${this.getFormControl('motivation').value}

## What does the proposed API look like?

${this.getFormControl('proposal').value}

`;
                document.getElementById('previewContent').innerHTML = marked(this.confirmMarkdown);
                // subnmit
                this.isPreviewVisible = true;
            }
        }
    }
}
